<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\CarbonPriceService;

class TestCarbonPrice extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'carbon:test-price';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Test Carbon Price Service v·ªõi external API';

    /**
     * Execute the console command.
     */
    public function handle(CarbonPriceService $carbonPriceService)
    {
        $this->info('üß™ Testing Carbon Price Service...');
        
        try {
            // Test current price
            $this->info('üìä L·∫•y gi√° hi·ªán t·∫°i...');
            $currentPrice = $carbonPriceService->getCurrentPrice();
            $this->info("‚úÖ Gi√° hi·ªán t·∫°i: $${currentPrice} USD/credit");
            
            // Test market info
            $this->info('üìà L·∫•y th√¥ng tin th·ªã tr∆∞·ªùng...');
            $marketInfo = $carbonPriceService->getMarketInfo();
            $this->info("‚úÖ Market Trend: {$marketInfo['trend']}");
            $this->info("‚úÖ 24h Change: {$marketInfo['change_24h']}%");
            $this->info("‚úÖ Volume: {$marketInfo['volume']}");
            $this->info("‚úÖ Market Cap: $${marketInfo['market_cap']}");
            
            // Test historical price
            $this->info('üìÖ L·∫•y gi√° l·ªãch s·ª≠...');
            $yesterday = now()->subDay()->format('Y-m-d');
            $historicalPrice = $carbonPriceService->getPriceByDate($yesterday);
            $this->info("‚úÖ Gi√° ng√†y {$yesterday}: $${historicalPrice} USD/credit");
            
            // Test average price
            $this->info('üìä L·∫•y gi√° trung b√¨nh...');
            $startDate = now()->subWeek()->format('Y-m-d');
            $endDate = now()->format('Y-m-d');
            $averagePrice = $carbonPriceService->getAveragePrice($startDate, $endDate);
            $this->info("‚úÖ Gi√° trung b√¨nh t·ª´ {$startDate} ƒë·∫øn {$endDate}: $${averagePrice} USD/credit");
            
            $this->info('üéâ T·∫•t c·∫£ tests ƒë·ªÅu th√†nh c√¥ng!');
            
        } catch (\Exception $e) {
            $this->error('‚ùå Error: ' . $e->getMessage());
            $this->warn('‚ö†Ô∏è  C√≥ th·ªÉ external API kh√¥ng ho·∫°t ƒë·ªông, s·ª≠ d·ª•ng gi√° fallback');
        }
    }
}
